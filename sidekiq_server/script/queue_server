#!/usr/bin/env ruby
#encoding: utf-8
#在worker根目录执行
#启动：RACK_ENV=production ./script/queue_server start
#停止：RACK_ENV=production ./script/queue_server stop

require 'yaml'
require 'fileutils'

# worker项目根路径
root_path = File.dirname File.dirname(File.realpath(__FILE__))
#读取配置文件
config_path =  File.join(root_path, 'config.yml')
config = YAML.load File.open(config_path)

#环境变量
env = ENV['RACK_ENV'] ? ENV['RACK_ENV'] : 'production'
#日志文件
log_file = File.join(config['log_dir'], 'queue-server.log')
#sidekiq pid文件路径
pidfile  = File.join(config['pid_dir'], 'queue-server.pid')

#检查tmp目录和log目录是否存在，不存在则创建
[File.dirname(log_file), File.dirname(pidfile)].each do |dir|
  FileUtils.mkdir_p dir, mode: 0776 unless File.exist? dir
end

action = ARGV.first.to_s.strip
action = 'start' unless ['start', 'stop'].include? action
case action
  when 'start'
    if File.exist? pidfile
      pid = File.open(pidfile, 'r').read
      if File.exist?("/proc/#{pid}")
        puts 'sidekiq already started.'
        exit
      end
    end

    cmd = "RACK_ENV=#{env} bundle exec sidekiq -r ./local_worker.rb -c #{config['thread_count']} -q #{config['queue_name']} -P #{pidfile} -L #{log_file} -d"
    # puts cmd
    result = system cmd
    print 'sidekiq start ', result ? 'success' : 'fail', "\n"
  when 'stop'
    result = system "bundle exec sidekiqctl stop #{pidfile}"
    print 'sidekiq stop ', result ? 'success' : 'fail', "\n"
end
